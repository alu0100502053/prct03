21) Que "\t\n" no interpola mientras que '\t\n' si lo hace.
22) 
los elementos que les pasamos los pone entre comillas simples.
%q: se usa para poner una citación con comillas simples
%q{hello world\n}: muestra hello world como una cadena de texto
%q{’a’ ’b’ ’c’}: muestra los caracteres a, b, c, como una cadena de texto

23)
los elementos que les pasamos los pone entre comillas doble, es decir, existe la interpolacion.
%Q: se usa para poner una citación con comillas dobles
%Q{hello world\n}: muestra hello world\n como una citación con entre comillas dobles
%Q{"a" "b" "c"}: muestra "a" "b" "c" como una citación individual de cada caracter entre comillas

24)
 => "--4--\n--2--\n" 


25)
 => "--\#{a}--\n--\#{b}--\n" 

26)
	s[0,2] : "he"
	s[-1,1] : "o"
	s[0,10] : "hello"

27)
 => "hello world"

28)
 => "..."

29)
 => "2 2 2 "
 

30)

Devuelve un array tomando cada palabra un elemento del array

31)
Nos devuelve una lista con los elementos pero entre comillas simples, por lo que no existe interpolacion.

32)
Nos devuelve una lista con los elementos pero entre comillas dobles, por lo que si existe interpolacion.

33)
La variable nils contiene tres elementos inicializados a nil cada uno de ellos quedando asi: => [nil, nil, nil]

34)
 => [0, 0, 0] 

35)
 => [[1, 2], [2, 3]]
se crea una copia del array.

36)
 => [0, 2, 4] 

37)
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ["b"]
>> a[-2,2]
=> ["d", "e"]
>> a[0..2]
=> ["a", "b", "c"]
>> a[0...1]
=> ["a"]
>> a[-2..-1]
=> ["d", "e"]

38)
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> ["1,2,3", "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=> ["B", "C", "D", "E"]
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> ["B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=> ["B", "C"]

39)
>> a = (1...4).to_a
=> [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
>> a = a + 9
TypeError: can't convert Fixnum into Array
from (irb):78:in `+'
from (irb):78
from :0

40)
>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"] 

>> x = x - %w{b c d}
=>["a", "a"] 

41)
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42)
>> a = []
=> []
>> a << 1
=>[1]
>> a << 2 << 3
=> [1, 2, 3]
>> a << [4, 5, 6]
=>[1, 2, 3, [4, 5, 6]] 
>> a.concat [7, 8]
=>[1, 2, 3, [4, 5, 6], 7, 8]

43)
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=>[1, 2, 3, 4, 5] 
>> d = b | a
=>[5, 4, 3, 2, 1] 
>> e = a & b
=>[2, 3, 4]
>> f = b & a
=>[4, 3, 2] 


44)
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b = 1...10
=> 1....10
>> b.to_a
=>[1, 2, 3, 4, 5, 6, 7, 8, 9] 

>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a


45)
>> r = 0...100
=> 0....100
>> r.member? 50
=>true
>> r.include? 99.9
=>true
>> r.member? 99.9
=>true

46)
>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
=> hello
=> nil
>> puts "hello" if nil
=> nill
>> puts "hello" if ""
=> (irb):83: warning: string literal in condition
hello
=> nil

47)
>> x = :sym
=> :sym
>> x.class
=>Symbol
>> x == ’sym’
=>false
>> x == :sym
=>true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=>Symbol
>> x == ’sym’.to_sym
=>true
>> x.to_s == ’sym’
=> true.

48)
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub => nil


